{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/formatters.ts", "../src/utils/setText.ts", "../node_modules/.pnpm/@shopify+graphql-client@1.4.1/node_modules/@shopify/graphql-client/src/graphql-client/constants.ts", "../node_modules/.pnpm/@shopify+graphql-client@1.4.1/node_modules/@shopify/graphql-client/src/graphql-client/utilities.ts", "../node_modules/.pnpm/@shopify+graphql-client@1.4.1/node_modules/@shopify/graphql-client/src/graphql-client/http-fetch.ts", "../node_modules/.pnpm/@shopify+graphql-client@1.4.1/node_modules/@shopify/graphql-client/src/graphql-client/graphql-client.ts", "../node_modules/.pnpm/@shopify+graphql-client@1.4.1/node_modules/@shopify/graphql-client/src/api-client-utilities/validations.ts", "../node_modules/.pnpm/@shopify+graphql-client@1.4.1/node_modules/@shopify/graphql-client/src/api-client-utilities/api-versions.ts", "../node_modules/.pnpm/@shopify+graphql-client@1.4.1/node_modules/@shopify/graphql-client/src/api-client-utilities/utilities.ts", "../node_modules/.pnpm/@shopify+storefront-api-client@1.0.9/node_modules/@shopify/storefront-api-client/src/constants.ts", "../node_modules/.pnpm/@shopify+storefront-api-client@1.0.9/node_modules/@shopify/storefront-api-client/src/validations.ts", "../node_modules/.pnpm/@shopify+storefront-api-client@1.0.9/node_modules/@shopify/storefront-api-client/src/storefront-api-client.ts", "../src/utils/shopify.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "const TZ = 'America/Los_Angeles';\n\nconst dateFmt = new Intl.DateTimeFormat('en-US', {\n  weekday: 'short',\n  month: 'short',\n  day: 'numeric',\n  timeZone: TZ,\n});\nconst timeFmt = new Intl.DateTimeFormat('en-US', {\n  hour: 'numeric',\n  minute: '2-digit',\n  hour12: true,\n  timeZone: TZ,\n});\n\nexport const dateFormatter = (rawDate: Date) => {\n  const date = new Date(rawDate);\n  return dateFmt.format(date);\n};\n\nexport const timeFormatter = (rawDate: Date) => {\n  const date = new Date(rawDate);\n  return timeFmt.format(date);\n};\n\nexport const moneyFormatter = (amount: number | null | undefined, currency = 'USD') =>\n  amount == null\n    ? ''\n    : new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency,\n        maximumFractionDigits: 2,\n      }).format(amount);\n", "export const setTextByAttr = (element: Element | Document, attr: string, text: string) => {\n  const el = element.querySelector<HTMLElement>(`[data-field=\"${attr}\"]`);\n  if (!el) {\n    console.warn(`Element with data-field=\"${attr}\" not found`);\n    return;\n  }\n  el.textContent = text;\n};\n", "export const CLIENT = 'GraphQL Client';\nexport const MIN_RETRIES = 0;\nexport const MAX_RETRIES = 3;\n\nexport const GQL_API_ERROR =\n  \"An error occurred while fetching from the API. Review 'graphQLErrors' for details.\";\nexport const UNEXPECTED_CONTENT_TYPE_ERROR =\n  'Response returned unexpected Content-Type:';\nexport const NO_DATA_OR_ERRORS_ERROR =\n  'An unknown error has occurred. The API did not return a data object or any errors in its response.';\n\nexport const CONTENT_TYPES = {\n  json: 'application/json',\n  multipart: 'multipart/mixed',\n};\nexport const SDK_VARIANT_HEADER = 'X-SDK-Variant';\nexport const SDK_VERSION_HEADER = 'X-SDK-Version';\n\nexport const DEFAULT_SDK_VARIANT = 'shopify-graphql-client';\n// This is value is replaced with package.json version during rollup build process\nexport const DEFAULT_CLIENT_VERSION = 'ROLLUP_REPLACE_CLIENT_VERSION';\n\nexport const RETRY_WAIT_TIME = 1000;\nexport const RETRIABLE_STATUS_CODES = [429, 503];\nexport const DEFER_OPERATION_REGEX = /@(defer)\\b/i;\nexport const NEWLINE_SEPARATOR = '\\r\\n';\nexport const BOUNDARY_HEADER_REGEX = /boundary=\"?([^=\";]+)\"?/i;\nexport const HEADER_SEPARATOR = NEWLINE_SEPARATOR + NEWLINE_SEPARATOR;\n", "import {CLIENT, MAX_RETRIES, MIN_RETRIES} from './constants';\n\nexport function formatErrorMessage(message: string, client = CLIENT) {\n  return message.startsWith(`${client}`) ? message : `${client}: ${message}`;\n}\n\nexport function getErrorMessage(error: any) {\n  return error instanceof Error ? error.message : JSON.stringify(error);\n}\n\nexport function getErrorCause(error: any): Record<string, any> | undefined {\n  return error instanceof Error && error.cause ? error.cause : undefined;\n}\n\nexport function combineErrors(dataArray: Record<string, any>[]) {\n  return dataArray.flatMap(({errors}) => {\n    return errors ?? [];\n  });\n}\n\nexport function validateRetries({\n  client,\n  retries,\n}: {\n  client: string;\n  retries?: number;\n}) {\n  if (\n    retries !== undefined &&\n    (typeof retries !== 'number' ||\n      retries < MIN_RETRIES ||\n      retries > MAX_RETRIES)\n  ) {\n    throw new Error(\n      `${client}: The provided \"retries\" value (${retries}) is invalid - it cannot be less than ${MIN_RETRIES} or greater than ${MAX_RETRIES}`,\n    );\n  }\n}\n\nexport function getKeyValueIfValid(key: string, value?: any) {\n  return value &&\n    (typeof value !== 'object' ||\n      Array.isArray(value) ||\n      (typeof value === 'object' && Object.keys(value).length > 0))\n    ? {[key]: value}\n    : {};\n}\n\nexport function buildDataObjectByPath(\n  path: string[],\n  data: any,\n): Record<string | number, any> {\n  if (path.length === 0) {\n    return data;\n  }\n\n  const key = path.pop() as string | number;\n  const newData = {\n    [key]: data,\n  };\n\n  if (path.length === 0) {\n    return newData;\n  }\n\n  return buildDataObjectByPath(path, newData);\n}\n\nfunction combineObjects(baseObject: any, newObject: any) {\n  return Object.keys(newObject || {}).reduce(\n    (acc: any, key: string | number) => {\n      if (\n        (typeof newObject[key] === 'object' || Array.isArray(newObject[key])) &&\n        baseObject[key]\n      ) {\n        acc[key] = combineObjects(baseObject[key], newObject[key]);\n        return acc;\n      }\n\n      acc[key] = newObject[key];\n      return acc;\n    },\n    Array.isArray(baseObject) ? [...baseObject] : {...baseObject},\n  );\n}\n\nexport function buildCombinedDataObject([\n  initialDatum,\n  ...remainingData\n]: any[]) {\n  return remainingData.reduce(combineObjects, {...initialDatum});\n}\n", "import {CLIENT, RETRIABLE_STATUS_CODES, RETRY_WAIT_TIME} from './constants';\nimport {CustomFetchApi, GraphQLClient, Logger} from './types';\nimport {formatErrorMessage, getErrorMessage} from './utilities';\n\ninterface GenerateHttpFetchOptions {\n  clientLogger: Logger;\n  customFetchApi?: CustomFetchApi;\n  client?: string;\n  defaultRetryWaitTime?: number;\n  retriableCodes?: number[];\n}\n\nexport function generateHttpFetch({\n  clientLogger,\n  customFetchApi = fetch,\n  client = CLIENT,\n  defaultRetryWaitTime = RETRY_WAIT_TIME,\n  retriableCodes = RETRIABLE_STATUS_CODES,\n}: GenerateHttpFetchOptions) {\n  const httpFetch = async (\n    requestParams: Parameters<CustomFetchApi>,\n    count: number,\n    maxRetries: number,\n  ): ReturnType<GraphQLClient['fetch']> => {\n    const nextCount = count + 1;\n    const maxTries = maxRetries + 1;\n    let response: Response | undefined;\n\n    try {\n      response = await customFetchApi(...requestParams);\n\n      clientLogger({\n        type: 'HTTP-Response',\n        content: {\n          requestParams,\n          response,\n        },\n      });\n\n      if (\n        !response.ok &&\n        retriableCodes.includes(response.status) &&\n        nextCount <= maxTries\n      ) {\n        throw new Error();\n      }\n\n      const deprecationNotice =\n        response?.headers.get('X-Shopify-API-Deprecated-Reason') || '';\n      if (deprecationNotice) {\n        clientLogger({\n          type: 'HTTP-Response-GraphQL-Deprecation-Notice',\n          content: {\n            requestParams,\n            deprecationNotice,\n          },\n        });\n      }\n\n      return response;\n    } catch (error) {\n      if (nextCount <= maxTries) {\n        const retryAfter = response?.headers.get('Retry-After');\n        await sleep(\n          retryAfter ? parseInt(retryAfter, 10) : defaultRetryWaitTime,\n        );\n\n        clientLogger({\n          type: 'HTTP-Retry',\n          content: {\n            requestParams,\n            lastResponse: response,\n            retryAttempt: count,\n            maxRetries,\n          },\n        });\n\n        return httpFetch(requestParams, nextCount, maxRetries);\n      }\n\n      throw new Error(\n        formatErrorMessage(\n          `${\n            maxRetries > 0\n              ? `Attempted maximum number of ${maxRetries} network retries. Last message - `\n              : ''\n          }${getErrorMessage(error)}`,\n          client,\n        ),\n      );\n    }\n  };\n\n  return httpFetch;\n}\n\nasync function sleep(waitTime: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, waitTime));\n}\n", "import {generateHttpFetch} from './http-fetch';\nimport {\n  ClientOptions,\n  CustomFetchApi,\n  GraphQLClient,\n  ClientResponse,\n  ClientConfig,\n  Logger,\n  LogContentTypes,\n  DataChunk,\n} from './types';\nimport {\n  CLIENT,\n  GQL_API_ERROR,\n  UNEXPECTED_CONTENT_TYPE_ERROR,\n  NO_DATA_OR_ERRORS_ERROR,\n  CONTENT_TYPES,\n  RETRY_WAIT_TIME,\n  HEADER_SEPARATOR,\n  DEFER_OPERATION_REGEX,\n  BOUNDARY_HEADER_REGEX,\n  SDK_VARIANT_HEADER,\n  SDK_VERSION_HEADER,\n  DEFAULT_SDK_VARIANT,\n  DEFAULT_CLIENT_VERSION,\n} from './constants';\nimport {\n  formatErrorMessage,\n  getErrorMessage,\n  validateRetries,\n  getKeyValueIfValid,\n  buildDataObjectByPath,\n  buildCombinedDataObject,\n  getErrorCause,\n  combineErrors,\n} from './utilities';\n\nexport function createGraphQLClient({\n  headers,\n  url,\n  customFetchApi = fetch,\n  retries = 0,\n  logger,\n}: ClientOptions): GraphQLClient {\n  validateRetries({client: CLIENT, retries});\n\n  const config: ClientConfig = {\n    headers,\n    url,\n    retries,\n  };\n\n  const clientLogger = generateClientLogger(logger);\n  const httpFetch = generateHttpFetch({\n    customFetchApi,\n    clientLogger,\n    defaultRetryWaitTime: RETRY_WAIT_TIME,\n  });\n  const fetchFn = generateFetch(httpFetch, config);\n  const request = generateRequest(fetchFn);\n  const requestStream = generateRequestStream(fetchFn);\n\n  return {\n    config,\n    fetch: fetchFn,\n    request,\n    requestStream,\n  };\n}\n\nexport function generateClientLogger(logger?: Logger): Logger {\n  return (logContent: LogContentTypes) => {\n    if (logger) {\n      logger(logContent);\n    }\n  };\n}\n\nasync function processJSONResponse<TData = any>(\n  response: Response,\n): Promise<ClientResponse<TData>> {\n  const {errors, data, extensions} = await response.json<any>();\n\n  return {\n    ...getKeyValueIfValid('data', data),\n    ...getKeyValueIfValid('extensions', extensions),\n    headers: response.headers,\n\n    ...(errors || !data\n      ? {\n          errors: {\n            networkStatusCode: response.status,\n            message: formatErrorMessage(\n              errors ? GQL_API_ERROR : NO_DATA_OR_ERRORS_ERROR,\n            ),\n            ...getKeyValueIfValid('graphQLErrors', errors),\n            response,\n          },\n        }\n      : {}),\n  };\n}\n\nfunction generateFetch(\n  httpFetch: ReturnType<typeof generateHttpFetch>,\n  {url, headers, retries}: ClientConfig,\n): GraphQLClient['fetch'] {\n  return async (operation, options = {}) => {\n    const {\n      variables,\n      headers: overrideHeaders,\n      url: overrideUrl,\n      retries: overrideRetries,\n      keepalive,\n      signal,\n    } = options;\n\n    const body = JSON.stringify({\n      query: operation,\n      variables,\n    });\n\n    validateRetries({client: CLIENT, retries: overrideRetries});\n\n    const flatHeaders = Object.entries({\n      ...headers,\n      ...overrideHeaders,\n    }).reduce((headers: Record<string, string>, [key, value]) => {\n      headers[key] = Array.isArray(value) ? value.join(', ') : value.toString();\n      return headers;\n    }, {});\n\n    if (!flatHeaders[SDK_VARIANT_HEADER] && !flatHeaders[SDK_VERSION_HEADER]) {\n      flatHeaders[SDK_VARIANT_HEADER] = DEFAULT_SDK_VARIANT;\n      flatHeaders[SDK_VERSION_HEADER] = DEFAULT_CLIENT_VERSION;\n    }\n\n    const fetchParams: Parameters<CustomFetchApi> = [\n      overrideUrl ?? url,\n      {\n        method: 'POST',\n        headers: flatHeaders,\n        body,\n        signal,\n        keepalive,\n      },\n    ];\n\n    return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n  };\n}\n\nfunction generateRequest(\n  fetchFn: ReturnType<typeof generateFetch>,\n): GraphQLClient['request'] {\n  return async (...props) => {\n    if (DEFER_OPERATION_REGEX.test(props[0])) {\n      throw new Error(\n        formatErrorMessage(\n          'This operation will result in a streamable response - use requestStream() instead.',\n        ),\n      );\n    }\n\n    let response: Response | null = null;\n    try {\n      response = await fetchFn(...props);\n      const {status, statusText} = response;\n      const contentType = response.headers.get('content-type') || '';\n\n      if (!response.ok) {\n        return {\n          errors: {\n            networkStatusCode: status,\n            message: formatErrorMessage(statusText),\n            response,\n          },\n        };\n      }\n\n      if (!contentType.includes(CONTENT_TYPES.json)) {\n        return {\n          errors: {\n            networkStatusCode: status,\n            message: formatErrorMessage(\n              `${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`,\n            ),\n            response,\n          },\n        };\n      }\n\n      return await processJSONResponse(response);\n    } catch (error) {\n      return {\n        errors: {\n          message: getErrorMessage(error),\n          ...(response == null\n            ? {}\n            : {\n                networkStatusCode: response.status,\n                response,\n              }),\n        },\n      };\n    }\n  };\n}\n\nasync function* getStreamBodyIterator(\n  response: Response,\n): AsyncIterableIterator<string> {\n  const decoder = new TextDecoder();\n\n  // Response body is an async iterator\n  if ((response.body as any)![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any) {\n      yield decoder.decode(chunk);\n    }\n  } else {\n    const reader = response.body!.getReader();\n\n    let readResult: ReadableStreamReadResult<DataChunk>;\n    try {\n      while (!(readResult = await reader.read()).done) {\n        yield decoder.decode(readResult.value);\n      }\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nfunction readStreamChunk(\n  streamBodyIterator: AsyncIterableIterator<string>,\n  boundary: string,\n) {\n  return {\n    async *[Symbol.asyncIterator]() {\n      try {\n        let buffer = '';\n\n        for await (const textChunk of streamBodyIterator) {\n          buffer += textChunk;\n\n          if (buffer.indexOf(boundary) > -1) {\n            const lastBoundaryIndex = buffer.lastIndexOf(boundary);\n            const fullResponses = buffer.slice(0, lastBoundaryIndex);\n\n            const chunkBodies = fullResponses\n              .split(boundary)\n              .filter((chunk) => chunk.trim().length > 0)\n              .map((chunk) => {\n                const body = chunk\n                  .slice(\n                    chunk.indexOf(HEADER_SEPARATOR) + HEADER_SEPARATOR.length,\n                  )\n                  .trim();\n                return body;\n              });\n\n            if (chunkBodies.length > 0) {\n              yield chunkBodies;\n            }\n\n            buffer = buffer.slice(lastBoundaryIndex + boundary.length);\n\n            if (buffer.trim() === `--`) {\n              buffer = '';\n            }\n          }\n        }\n      } catch (error) {\n        throw new Error(\n          `Error occured while processing stream payload - ${getErrorMessage(\n            error,\n          )}`,\n        );\n      }\n    },\n  };\n}\n\nfunction createJsonResponseAsyncIterator(response: Response) {\n  return {\n    async *[Symbol.asyncIterator]() {\n      const processedResponse = await processJSONResponse(response);\n\n      yield {\n        ...processedResponse,\n        hasNext: false,\n      };\n    },\n  };\n}\n\nfunction getResponseDataFromChunkBodies(chunkBodies: string[]): {\n  data: any;\n  errors?: any;\n  extensions?: any;\n  hasNext: boolean;\n}[] {\n  return chunkBodies\n    .map((value) => {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        throw new Error(\n          `Error in parsing multipart response - ${getErrorMessage(error)}`,\n        );\n      }\n    })\n    .map((payload) => {\n      const {data, incremental, hasNext, extensions, errors} = payload;\n\n      // initial data chunk\n      if (!incremental) {\n        return {\n          data: data || {},\n          ...getKeyValueIfValid('errors', errors),\n          ...getKeyValueIfValid('extensions', extensions),\n          hasNext,\n        };\n      }\n\n      // subsequent data chunks\n      const incrementalArray: {data: any; errors?: any}[] = incremental.map(\n        ({data, path, errors}: any) => {\n          return {\n            data: data && path ? buildDataObjectByPath(path, data) : {},\n            ...getKeyValueIfValid('errors', errors),\n          };\n        },\n      );\n\n      return {\n        data:\n          incrementalArray.length === 1\n            ? incrementalArray[0].data\n            : buildCombinedDataObject([\n                ...incrementalArray.map(({data}) => data),\n              ]),\n        ...getKeyValueIfValid('errors', combineErrors(incrementalArray)),\n        hasNext,\n      };\n    });\n}\n\nfunction validateResponseData(\n  responseErrors: any[],\n  combinedData: ReturnType<typeof buildCombinedDataObject>,\n) {\n  if (responseErrors.length > 0) {\n    throw new Error(GQL_API_ERROR, {\n      cause: {\n        graphQLErrors: responseErrors,\n      },\n    });\n  }\n\n  if (Object.keys(combinedData).length === 0) {\n    throw new Error(NO_DATA_OR_ERRORS_ERROR);\n  }\n}\n\nfunction createMultipartResponseAsyncInterator(\n  response: Response,\n  responseContentType: string,\n) {\n  const boundaryHeader = (responseContentType ?? '').match(\n    BOUNDARY_HEADER_REGEX,\n  );\n  const boundary = `--${boundaryHeader ? boundaryHeader[1] : '-'}`;\n\n  if (\n    !response.body?.getReader &&\n    !(response.body as any)?.[Symbol.asyncIterator]\n  ) {\n    throw new Error('API multipart response did not return an iterable body', {\n      cause: response,\n    });\n  }\n\n  const streamBodyIterator = getStreamBodyIterator(response);\n\n  let combinedData: Record<string, any> = {};\n  let responseExtensions: Record<string, any> | undefined;\n\n  return {\n    async *[Symbol.asyncIterator]() {\n      try {\n        let streamHasNext = true;\n\n        for await (const chunkBodies of readStreamChunk(\n          streamBodyIterator,\n          boundary,\n        )) {\n          const responseData = getResponseDataFromChunkBodies(chunkBodies);\n\n          responseExtensions =\n            responseData.find((datum) => datum.extensions)?.extensions ??\n            responseExtensions;\n\n          const responseErrors = combineErrors(responseData);\n\n          combinedData = buildCombinedDataObject([\n            combinedData,\n            ...responseData.map(({data}) => data),\n          ]);\n\n          streamHasNext = responseData.slice(-1)[0].hasNext;\n\n          validateResponseData(responseErrors, combinedData);\n\n          yield {\n            ...getKeyValueIfValid('data', combinedData),\n            ...getKeyValueIfValid('extensions', responseExtensions),\n            hasNext: streamHasNext,\n          };\n        }\n\n        if (streamHasNext) {\n          throw new Error(`Response stream terminated unexpectedly`);\n        }\n      } catch (error) {\n        const cause = getErrorCause(error);\n\n        yield {\n          ...getKeyValueIfValid('data', combinedData),\n          ...getKeyValueIfValid('extensions', responseExtensions),\n          errors: {\n            message: formatErrorMessage(getErrorMessage(error)),\n            networkStatusCode: response.status,\n            ...getKeyValueIfValid('graphQLErrors', cause?.graphQLErrors),\n            response,\n          },\n          hasNext: false,\n        };\n      }\n    },\n  };\n}\n\nfunction generateRequestStream(\n  fetchFn: ReturnType<typeof generateFetch>,\n): GraphQLClient['requestStream'] {\n  return async (...props) => {\n    if (!DEFER_OPERATION_REGEX.test(props[0])) {\n      throw new Error(\n        formatErrorMessage(\n          'This operation does not result in a streamable response - use request() instead.',\n        ),\n      );\n    }\n\n    try {\n      const response = await fetchFn(...props);\n\n      const {statusText} = response;\n\n      if (!response.ok) {\n        throw new Error(statusText, {cause: response});\n      }\n\n      const responseContentType = response.headers.get('content-type') || '';\n\n      switch (true) {\n        case responseContentType.includes(CONTENT_TYPES.json):\n          return createJsonResponseAsyncIterator(response);\n        case responseContentType.includes(CONTENT_TYPES.multipart):\n          return createMultipartResponseAsyncInterator(\n            response,\n            responseContentType,\n          );\n        default:\n          throw new Error(\n            `${UNEXPECTED_CONTENT_TYPE_ERROR} ${responseContentType}`,\n            {cause: response},\n          );\n      }\n    } catch (error) {\n      return {\n        async *[Symbol.asyncIterator]() {\n          const response = getErrorCause(error);\n\n          yield {\n            errors: {\n              message: formatErrorMessage(getErrorMessage(error)),\n              ...getKeyValueIfValid('networkStatusCode', response?.status),\n              ...getKeyValueIfValid('response', response),\n            },\n            hasNext: false,\n          };\n        },\n      };\n    }\n  };\n}\n", "import {ApiClientLogger} from './types';\n\nexport function validateDomainAndGetStoreUrl({\n  client,\n  storeDomain,\n}: {\n  client: string;\n  storeDomain: string | undefined;\n}) {\n  try {\n    if (!storeDomain || typeof storeDomain !== 'string') {\n      throw new Error();\n    }\n\n    const trimmedDomain = storeDomain.trim();\n\n    const protocolUrl = trimmedDomain.match(/^https?:/)\n      ? trimmedDomain\n      : `https://${trimmedDomain}`;\n\n    const url = new URL(protocolUrl);\n    url.protocol = 'https';\n\n    return url.origin;\n  } catch (error) {\n    throw new Error(\n      `${client}: a valid store domain (\"${storeDomain}\") must be provided`,\n      {cause: error},\n    );\n  }\n}\n\nexport function validateApiVersion({\n  client,\n  currentSupportedApiVersions,\n  apiVersion,\n  logger,\n}: {\n  client: string;\n  currentSupportedApiVersions: string[];\n  apiVersion: string;\n  logger?: ApiClientLogger;\n}) {\n  const versionError = `${client}: the provided apiVersion (\"${apiVersion}\")`;\n  const supportedVersion = `Currently supported API versions: ${currentSupportedApiVersions.join(\n    ', ',\n  )}`;\n\n  if (!apiVersion || typeof apiVersion !== 'string') {\n    throw new Error(`${versionError} is invalid. ${supportedVersion}`);\n  }\n\n  const trimmedApiVersion = apiVersion.trim();\n\n  if (!currentSupportedApiVersions.includes(trimmedApiVersion)) {\n    if (logger) {\n      logger({\n        type: 'Unsupported_Api_Version',\n        content: {\n          apiVersion,\n          supportedApiVersions: currentSupportedApiVersions,\n        },\n      });\n    } else {\n      console.warn(\n        `${versionError} is likely deprecated or not supported. ${supportedVersion}`,\n      );\n    }\n  }\n}\n", "function getQuarterMonth(quarter: number) {\n  const month = quarter * 3 - 2;\n  return month === 10 ? month : `0${month}`;\n}\n\nfunction getPrevousVersion(year: number, quarter: number, nQuarter: number) {\n  const versionQuarter = quarter - nQuarter;\n\n  if (versionQuarter <= 0) {\n    return `${year - 1}-${getQuarterMonth(versionQuarter + 4)}`;\n  }\n\n  return `${year}-${getQuarterMonth(versionQuarter)}`;\n}\n\nexport function getCurrentApiVersion() {\n  const date = new Date();\n  const month = date.getUTCMonth();\n  const year = date.getUTCFullYear();\n\n  const quarter = Math.floor(month / 3 + 1);\n\n  return {\n    year,\n    quarter,\n    version: `${year}-${getQuarterMonth(quarter)}`,\n  };\n}\n\nexport function getCurrentSupportedApiVersions() {\n  const {year, quarter, version: currentVersion} = getCurrentApiVersion();\n\n  const nextVersion =\n    quarter === 4\n      ? `${year + 1}-01`\n      : `${year}-${getQuarterMonth(quarter + 1)}`;\n\n  return [\n    getPrevousVersion(year, quarter, 3),\n    getPrevousVersion(year, quarter, 2),\n    getPrevousVersion(year, quarter, 1),\n    currentVersion,\n    nextVersion,\n    'unstable',\n  ];\n}\n", "import {RequestParams} from '../graphql-client/types';\n\nimport {\n  AllOperations,\n  ApiClient,\n  ApiClientConfig,\n  ApiClientRequestOptions,\n} from './types';\n\nexport function generateGetHeaders(\n  config: ApiClientConfig,\n): ApiClient['getHeaders'] {\n  return (customHeaders) => {\n    return {...(customHeaders ?? {}), ...config.headers};\n  };\n}\n\nexport function generateGetGQLClientParams<\n  Operations extends AllOperations = AllOperations,\n>({getHeaders, getApiUrl}: Pick<ApiClient, 'getHeaders' | 'getApiUrl'>) {\n  return <Operation extends keyof Operations>(\n    operation: Operation,\n    options?: ApiClientRequestOptions<Operation, Operations>,\n  ): RequestParams => {\n    const props: RequestParams = [operation as string];\n\n    if (options && Object.keys(options).length > 0) {\n      const {\n        variables,\n        apiVersion: propApiVersion,\n        headers,\n        retries,\n        signal,\n      } = options as any;\n\n      props.push({\n        ...(variables ? {variables} : {}),\n        ...(headers ? {headers: getHeaders(headers)} : {}),\n        ...(propApiVersion ? {url: getApiUrl(propApiVersion)} : {}),\n        ...(retries ? {retries} : {}),\n        ...(signal ? {signal} : {}),\n      });\n    }\n\n    return props;\n  };\n}\n", "export const DEFAULT_CONTENT_TYPE = 'application/json';\nexport const DEFAULT_SDK_VARIANT = 'storefront-api-client';\n// This is value is replaced with package.json version during rollup build process\nexport const DEFAULT_CLIENT_VERSION = 'ROLLUP_REPLACE_CLIENT_VERSION';\n\nexport const PUBLIC_ACCESS_TOKEN_HEADER = 'X-Shopify-Storefront-Access-Token';\nexport const PRIVATE_ACCESS_TOKEN_HEADER = 'Shopify-Storefront-Private-Token';\nexport const SDK_VARIANT_HEADER = 'X-SDK-Variant';\nexport const SDK_VERSION_HEADER = 'X-SDK-Version';\nexport const SDK_VARIANT_SOURCE_HEADER = 'X-SDK-Variant-Source';\n\nexport const CLIENT = 'Storefront API Client';\n", "import {CLIENT} from './constants';\n\nexport function validatePrivateAccessTokenUsage(\n  privateAccessToken: string | undefined,\n) {\n  if (privateAccessToken && typeof window !== 'undefined') {\n    throw new Error(\n      `${CLIENT}: private access tokens and headers should only be used in a server-to-server implementation. Use the public API access token in nonserver environments.`,\n    );\n  }\n}\n\nexport function validateRequiredAccessTokens(\n  publicAccessToken: string | undefined,\n  privateAccessToken: string | undefined,\n) {\n  if (!publicAccessToken && !privateAccessToken) {\n    throw new Error(\n      `${CLIENT}: a public or private access token must be provided`,\n    );\n  }\n\n  if (publicAccessToken && privateAccessToken) {\n    throw new Error(\n      `${CLIENT}: only provide either a public or private access token`,\n    );\n  }\n}\n", "import {\n  createGraphQLClient,\n  getCurrentSupportedApiVersions,\n  validateDomainAndGetStoreUrl,\n  validateApiVersion,\n  generateGetGQLClientParams,\n  generateGetHeaders,\n} from '@shopify/graphql-client';\n\nimport {\n  StorefrontApiClientOptions,\n  StorefrontApiClient,\n  StorefrontApiClientConfig,\n  StorefrontOperations,\n} from './types';\nimport {\n  DEFAULT_SDK_VARIANT,\n  DEFAULT_CLIENT_VERSION,\n  SDK_VARIANT_HEADER,\n  SDK_VARIANT_SOURCE_HEADER,\n  SDK_VERSION_HEADER,\n  DEFAULT_CONTENT_TYPE,\n  PUBLIC_ACCESS_TOKEN_HEADER,\n  PRIVATE_ACCESS_TOKEN_HEADER,\n  CLIENT,\n} from './constants';\nimport {\n  validateRequiredAccessTokens,\n  validatePrivateAccessTokenUsage,\n} from './validations';\n\nexport function createStorefrontApiClient({\n  storeDomain,\n  apiVersion,\n  publicAccessToken,\n  privateAccessToken,\n  clientName,\n  retries = 0,\n  customFetchApi,\n  logger,\n}: StorefrontApiClientOptions): StorefrontApiClient {\n  const currentSupportedApiVersions = getCurrentSupportedApiVersions();\n\n  const storeUrl = validateDomainAndGetStoreUrl({\n    client: CLIENT,\n    storeDomain,\n  });\n\n  const baseApiVersionValidationParams = {\n    client: CLIENT,\n    currentSupportedApiVersions,\n    logger,\n  };\n\n  validateApiVersion({...baseApiVersionValidationParams, apiVersion});\n  validateRequiredAccessTokens(publicAccessToken, privateAccessToken);\n  validatePrivateAccessTokenUsage(privateAccessToken);\n\n  const apiUrlFormatter = generateApiUrlFormatter(\n    storeUrl,\n    apiVersion,\n    baseApiVersionValidationParams,\n  );\n\n  const config: StorefrontApiClientConfig = {\n    storeDomain: storeUrl,\n    apiVersion,\n    ...(publicAccessToken\n      ? {publicAccessToken}\n      : {\n          privateAccessToken: privateAccessToken!,\n        }),\n    headers: {\n      'Content-Type': DEFAULT_CONTENT_TYPE,\n      Accept: DEFAULT_CONTENT_TYPE,\n      [SDK_VARIANT_HEADER]: DEFAULT_SDK_VARIANT,\n      [SDK_VERSION_HEADER]: DEFAULT_CLIENT_VERSION,\n      ...(clientName ? {[SDK_VARIANT_SOURCE_HEADER]: clientName} : {}),\n      ...(publicAccessToken\n        ? {[PUBLIC_ACCESS_TOKEN_HEADER]: publicAccessToken}\n        : {[PRIVATE_ACCESS_TOKEN_HEADER]: privateAccessToken!}),\n    },\n    apiUrl: apiUrlFormatter(),\n    clientName,\n  };\n\n  const graphqlClient = createGraphQLClient({\n    headers: config.headers,\n    url: config.apiUrl,\n    retries,\n    customFetchApi,\n    logger,\n  });\n\n  const getHeaders = generateGetHeaders(config);\n  const getApiUrl = generateGetApiUrl(config, apiUrlFormatter);\n\n  const getGQLClientParams = generateGetGQLClientParams<StorefrontOperations>({\n    getHeaders,\n    getApiUrl,\n  });\n\n  const client: StorefrontApiClient = {\n    config,\n    getHeaders,\n    getApiUrl,\n    fetch: (...props) => {\n      return graphqlClient.fetch(...getGQLClientParams(...props));\n    },\n    request: (...props) => {\n      return graphqlClient.request(...getGQLClientParams(...props));\n    },\n    requestStream: (...props) => {\n      return graphqlClient.requestStream(...getGQLClientParams(...props));\n    },\n  };\n\n  return Object.freeze(client);\n}\n\nfunction generateApiUrlFormatter(\n  storeUrl: string,\n  defaultApiVersion: string,\n  baseApiVersionValidationParams: Omit<\n    Parameters<typeof validateApiVersion>[0],\n    'apiVersion'\n  >,\n) {\n  return (apiVersion?: string) => {\n    if (apiVersion) {\n      validateApiVersion({\n        ...baseApiVersionValidationParams,\n        apiVersion,\n      });\n    }\n\n    const urlApiVersion = (apiVersion ?? defaultApiVersion).trim();\n\n    return `${storeUrl}/api/${urlApiVersion}/graphql.json`;\n  };\n}\n\nfunction generateGetApiUrl(\n  config: StorefrontApiClientConfig,\n  apiUrlFormatter: (version?: string) => string,\n): StorefrontApiClient['getApiUrl'] {\n  return (propApiVersion?: string) => {\n    return propApiVersion ? apiUrlFormatter(propApiVersion) : config.apiUrl;\n  };\n}\n", "import { createStorefrontApiClient } from '@shopify/storefront-api-client';\n\nexport function formatProductId(id: string | null): string {\n  if (!id) {\n    throw new Error('Invalid product ID');\n  }\n  if (id.startsWith('gid://')) {\n    return id;\n  }\n  return `gid://shopify/Product/${id}`;\n}\n\nexport function formatVariantId(id: string | null): string {\n  if (!id) {\n    throw new Error('Invalid variant ID');\n  }\n  if (id.startsWith('gid://')) {\n    return id;\n  }\n  return `gid://shopify/ProductVariant/${id}`;\n}\n\nconst DOMAIN = 'll-theme.myshopify.com';\nconst TOKEN = 'b2506cf21eef17d954028e02a4f3eb46';\nconst API_VER = '2025-07';\n\n//const VARIANT_ID = 'gid://shopify/ProductVariant/49903425388848';\n\nconst client = createStorefrontApiClient({\n  storeDomain: DOMAIN,\n  apiVersion: API_VER,\n  publicAccessToken: TOKEN,\n});\n\nexport async function getProducts() {\n  try {\n    const { data, errors } = await client.request(\n      `\n      query Products {\n        products(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n              description\n              priceRange {\n                minVariantPrice {\n                  amount\n                  currencyCode\n                }\n              }\n              images(first: 1) {\n                edges {\n                  node {\n                    url\n                    altText\n                  }\n                }\n              }\n              variants(first: 10) {\n                edges {\n                  node {\n                    id\n                    title\n                    quantityAvailable\n                    price {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      `\n    );\n\n    if (errors) {\n      throw new Error(errors.message);\n    }\n    return data.products.edges.map((edge) => edge.node);\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    return [];\n  }\n}\n\nexport async function getProductsByIDs(ids: (string | null)[]) {\n  if (!ids || ids.length === 0) return [];\n\n  const formattedIds = ids.map((id) => formatProductId(id));\n\n  try {\n    const { data, errors } = await client.request(\n      `\n        query ($ids: [ID!]!) {\n        nodes(ids: $ids) {\n            ... on Product {\n              id\n              handle\n              title\n              gameType:  metafield(namespace:\"custom\", key:\"game_type\"){ value }\n              startTime: metafield(namespace:\"custom\", key:\"start_time\"){ value }\n              duration:  metafield(namespace:\"custom\", key:\"duration\"){ value }\n              format:    metafield(namespace:\"custom\", key:\"format\"){ value }\n              variants(first: 50) {\n                edges { node {\n                  id\n                  price { amount }\n                  quantityAvailable\n                  selectedOptions { name value }\n                }}\n              }\n            }\n          }\n        }\n      `,\n      { variables: { ids: formattedIds } }\n    );\n\n    if (errors) {\n      throw new Error(errors.graphQLErrors?.[0]?.message || errors.message);\n    }\n    return data.nodes;\n  } catch (error) {\n    console.error('Error fetching products by IDs:', error);\n    return [];\n  }\n}\n\n// Get product by handle\nexport async function getProductByHandle(handle: string) {\n  try {\n    const { data, errors } = await client.request(\n      `\n      query ProductByHandle($handle: String!) {\n        productByHandle(handle: $handle) {\n          id\n          title\n          description\n          handle\n          variants(first: 10) {\n            edges {\n              node {\n                id\n                title\n                quantityAvailable\n                price {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n      }\n      `,\n      { variables: { handle } }\n    );\n\n    if (errors) {\n      throw new Error(errors.graphQLErrors?.[0]?.message || errors.message);\n    }\n\n    return data.productByHandle;\n  } catch (error) {\n    console.error(`Error fetching product with handle ${handle}:`, error);\n    return null;\n  }\n}\n\n// Update your getEventByHandle function:\nexport async function getEventByHandle(handle: string) {\n  try {\n    const { data, errors } = await client.request(\n      `\n      query EventByHandle($handle: String!) {\n        productByHandle(handle: $handle) {\n          id\n          title\n          handle\n          description\n          gameType:  metafield(namespace:\"custom\", key:\"game_type\") { value }\n          startTime: metafield(namespace:\"custom\", key:\"start_time\") { value }\n          duration:  metafield(namespace:\"custom\", key:\"duration\") { value }\n          format:    metafield(namespace:\"custom\", key:\"format\") { value }\n          bandai:    metafield(namespace:\"custom\", key:\"bandai_tcg\") { value }\n          complementaryProducts: metafield(namespace:\"shopify--discovery--product_recommendation\", key:\"complementary_products\") {\n            references(first: 20) {\n              edges { node { ... on Product { \n                id \n                title\n                variants(first: 4) {\n                  edges { node {\n                    id \n                    title \n                    quantityAvailable\n                    price { amount currencyCode }\n                  }}\n                }\n              }}}\n            }\n          }\n          variants(first: 50) {\n            edges { node {\n              id\n              title\n              quantityAvailable\n              price { amount currencyCode }\n              selectedOptions { name value }\n            } }\n          }\n        }\n      }\n      `,\n      { variables: { handle } }\n    );\n\n    if (errors) {\n      throw new Error(errors.graphQLErrors?.[0]?.message || errors.message);\n    }\n\n    return data.productByHandle;\n  } catch (error) {\n    console.error(`Error fetching event product with handle ${handle}:`, error);\n    return null;\n  }\n}\n\nexport async function getCollectionByHandle(handle: string) {\n  try {\n    const { data, errors } = await client.request(\n      `\n        query ($handle: String!) {\n        collectionByHandle(handle: $handle) {\n          products(first: 100) {\n            edges { node {\n              id\n              handle\n              title\n              totalInventory\n              gameType:   metafield(namespace: \"custom\", key: \"game_type\") { value }\n              startTime:  metafield(namespace: \"custom\", key: \"start_time\") { value }\n              duration:   metafield(namespace: \"custom\", key: \"duration\") { value }\n              format:     metafield(namespace: \"custom\", key: \"format\") { value }\n              variants(first: 50) { edges { node {\n                id quantityAvailable price { amount currencyCode }\n                selectedOptions { name value }\n              }}}\n            }}\n          }\n        }\n      }\n      `,\n      { variables: { handle } }\n    );\n\n    if (errors) {\n      throw new Error(errors.graphQLErrors?.[0]?.message || errors.message);\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error fetching collection with handle ${handle}:`, error);\n    return null;\n  }\n}\n\n// Create a cart\nexport async function createCart() {\n  try {\n    const { data, errors } = await client.request(\n      `\n      mutation CreateCart {\n        cartCreate {\n          cart {\n            id\n            checkoutUrl\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n      `\n    );\n\n    if (errors) {\n      throw new Error(errors.message);\n    }\n\n    return data.cartCreate.cart;\n  } catch (error) {\n    console.error('Error creating cart:', error);\n    throw error;\n  }\n}\n\nexport type CartLineInputLite = {\n  merchandiseId: string | null;\n  quantity: number;\n  attributes?: { key: string; value: string }[];\n};\n\nexport async function createCartWithLines(lines: CartLineInputLite[]) {\n  try {\n    const formatted = lines.map((l) => ({\n      merchandiseId: formatVariantId(l.merchandiseId),\n      quantity: l.quantity,\n      attributes: l.attributes || [],\n    }));\n\n    const { data, errors } = await client.request(\n      `\n      mutation cartCreate($input: CartInput) {\n        cartCreate(input: $input) {\n          cart { id checkoutUrl }\n          userErrors { field message }\n        }\n      }\n      `,\n      { variables: { input: { lines: formatted } } }\n    );\n\n    if (errors) {\n      throw new Error(errors.graphQLErrors?.[0]?.message || errors.message);\n    }\n\n    const userErrors = data?.cartCreate?.userErrors;\n    if (userErrors?.length) {\n      throw new Error(userErrors[0]?.message || 'Cart create failed');\n    }\n\n    return data?.cartCreate?.cart;\n  } catch (error) {\n    console.error('Error creating cart with lines:', error);\n    throw error;\n  }\n}\n\n// Add items to cart with improved error handling\nexport async function addItemsToCart(\n  cartId: string | null,\n  lines: { merchandiseId: string | null; quantity: number }[]\n) {\n  try {\n    const formattedLines = lines.map((line) => ({\n      attributes: [{ key: 'Custom Attribute', value: 'Custom Value' }],\n      merchandiseId: formatVariantId(line.merchandiseId),\n      quantity: line.quantity,\n    }));\n    const response = await client.request(\n      `\n      mutation CartLinesAdd($cartId: ID!, $lines: [CartLineInput!]!) {\n        cartLinesAdd(cartId: $cartId, lines: $lines) {\n          cart {\n            id\n            lines(first: 10) {\n              edges {\n                node {\n                  attributes {\n                    key\n                    value\n                  }\n                  id\n                  quantity\n                  merchandise {\n                    ... on ProductVariant {\n                      id\n                      title\n                    }\n                  }\n                }\n              }\n            }\n            checkoutUrl\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n      `,\n      {\n        variables: { cartId, lines: formattedLines },\n      }\n    );\n\n    const { data, errors } = response;\n\n    if (errors) {\n      console.error('GraphQL Errors:', errors);\n      throw new Error('GraphQL errors occurred');\n    }\n\n    // Check for user errors from the mutation\n    const userErrors = data?.cartLinesAdd?.userErrors;\n    if (userErrors && userErrors.length > 0) {\n      console.error('User Errors:', userErrors);\n      throw new Error(userErrors[0].message);\n    }\n\n    return data.cartLinesAdd.cart;\n  } catch (error) {\n    console.error('Error adding items to cart:', error);\n    throw error;\n  }\n}\n\n// async function createCheckout(playerName: string, deckId: string) {\n//   const query = `\n//     mutation cartCreate($input: CartInput) {\n//       cartCreate(input: $input) {\n//         cart {\n//         \tid\n//           checkoutUrl\n//         }\n//         userErrors { field message }\n//       }\n//     }`;\n\n//   const variables = {\n//     input: {\n//       lines: [{\n//         merchandiseId: VARIANT_ID,\n//         quantity: 1,\n//         attributes: [\n//           { key: \"Player Name\", value: playerName },\n//           { key: \"Deck / Game ID\", value: deckId }\n//         ]\n//       }]\n//     }\n//   };\n\n//   const request = await client.request(query, variables);\n//   console.log(request, '1');\n//   const { data, errors } = request;\n//   if (errors?.length) throw new Error(errors[0].message);\n//   console.log(data, errors);\n\n// }\n", "import { dateFormatter, moneyFormatter, timeFormatter } from '$utils/formatters';\nimport { setTextByAttr } from '$utils/setText';\nimport { formatProductId, getProductsByIDs } from '$utils/shopify';\n\ntype VariantInfo = { id: string; qty: number; price: number; options: Record<string, string> };\ntype ProductInfo = {\n  id: string;\n  handle: string;\n  title: string;\n  gameType: string;\n  start: Date | null;\n  durationMin: number | null;\n  format: string | null;\n  variants: VariantInfo[];\n  seatsLeft: number;\n  minPrice: number | null;\n  maxPrice: number | null;\n  currency: string;\n};\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(async () => {\n  const productCards = Array.from(document.querySelectorAll('[data-product-id]'));\n\n  if (!productCards || productCards.length === 0) return;\n\n  const productIds = [\n    ...new Set(productCards.map((card) => card.getAttribute('data-product-id')).filter(Boolean)),\n  ];\n\n  const data = await getProductsByIDs(productIds);\n\n  const productMap = new Map();\n\n  const productsArray = Array.isArray(data) ? data : [];\n\n  productsArray.forEach((p) => {\n    const variants: VariantInfo[] = (p.variants?.edges || []).map((e) => {\n      const n = e.node;\n      const options = Object.fromEntries((n.selectedOptions || []).map((o) => [o.name, o.value]));\n      return {\n        id: n.id,\n        qty: Number(n.quantityAvailable ?? 0),\n        price: Number(n.price?.amount ?? 0),\n        options,\n      };\n    });\n\n    const seatsLeft = variants.reduce((sum, v) => sum + (v.qty || 0), 0);\n    const prices = variants.map((v) => v.price).filter((n) => Number.isFinite(n)); // include 0 so Free events are handled\n    const minPrice = prices.length ? Math.min(...prices) : null;\n    const maxPrice = prices.length ? Math.max(...prices) : null;\n\n    const info: ProductInfo = {\n      id: p.id,\n      handle: p.handle,\n      title: p.title,\n      gameType: p.gameType?.value || '',\n      start: p.startTime?.value ? new Date(p.startTime.value) : null,\n      durationMin: p.duration?.value ? Number(p.duration.value) : null,\n      format: p.format?.value || null,\n      variants,\n      seatsLeft,\n      minPrice,\n      maxPrice,\n      currency: variants[0]?.price\n        ? p.variants?.edges?.[0]?.node?.price?.currencyCode || 'USD'\n        : 'USD',\n    };\n\n    productMap.set(info.id, info);\n  });\n\n  productCards.forEach((card: Element) => {\n    const productId = card.getAttribute('data-product-id');\n\n    if (!productId) {\n      console.error(`Product ID not found for card: ${card}`);\n      return;\n    }\n\n    const productData = productMap.get(formatProductId(productId)) as ProductInfo | undefined;\n\n    if (!productData) {\n      console.error(`Product not found: ${productId}`);\n      return;\n    }\n\n    if (productData.minPrice != null) {\n      let priceText = '';\n      if (productData.maxPrice != null && productData.maxPrice !== productData.minPrice) {\n        priceText = `${moneyFormatter(productData.minPrice, productData.currency)} \u2014 ${moneyFormatter(productData.maxPrice, productData.currency)}`;\n      } else {\n        priceText =\n          productData.minPrice === 0\n            ? 'Free'\n            : moneyFormatter(productData.minPrice, productData.currency);\n      }\n      setTextByAttr(card, 'price', priceText);\n    }\n    setTextByAttr(card, 'gameType', productData.gameType || '');\n    setTextByAttr(card, 'format', productData.format || '');\n    setTextByAttr(\n      card,\n      'duration',\n      productData.durationMin ? `${productData.durationMin} min` : ''\n    );\n    if (productData.start) {\n      setTextByAttr(card, 'date', dateFormatter(productData.start));\n      setTextByAttr(card, 'time', timeFormatter(productData.start));\n    }\n\n    const seatsText =\n      productData.seatsLeft > 0 ? `${productData.seatsLeft} seats left` : 'Sold out';\n    setTextByAttr(card, 'seats', seatsText);\n\n    const clickable = productData.seatsLeft > 0;\n\n    // Toggle clickable class for styling (e.g., cursor, hover)\n    (card as HTMLElement).classList.toggle('is-clickable', clickable);\n\n    // Overlay link approach: show/hide the full-card link based on availability\n    const overlayLink = card.querySelector<HTMLAnchorElement>('[data-role=\"link\"]');\n    if (overlayLink) {\n      if (clickable) {\n        overlayLink.style.display = 'block';\n        overlayLink.removeAttribute('aria-hidden');\n        overlayLink.removeAttribute('tabindex');\n      } else {\n        overlayLink.style.display = 'none';\n        overlayLink.setAttribute('aria-hidden', 'true');\n        overlayLink.setAttribute('tabindex', '-1');\n      }\n\n      // Optional: ensure there is an accessible label\n      if (!overlayLink.getAttribute('aria-label')) {\n        overlayLink.setAttribute('aria-label', productData.title || 'View event');\n      }\n    }\n\n    // Sold-out state (styling + semantics)\n    if (!clickable) {\n      (card as HTMLElement).classList.add('is-soldout');\n      (card as HTMLElement).setAttribute('aria-disabled', 'true');\n    }\n  });\n});\n"],
  "mappings": "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",
  "names": ["client", "client", "headers", "data", "errors", "client", "DEFAULT_SDK_VARIANT", "DEFAULT_CLIENT_VERSION", "SDK_VARIANT_HEADER", "SDK_VERSION_HEADER", "CLIENT", "CLIENT", "CLIENT", "SDK_VARIANT_HEADER", "DEFAULT_SDK_VARIANT", "SDK_VERSION_HEADER", "DEFAULT_CLIENT_VERSION", "client"]
}
